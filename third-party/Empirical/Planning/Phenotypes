Goals of a phenotype object
* Easy to add traits, similar to config settings; ideally one line per setting.
* Phenotypic traits should know how they get updated in different circumstances -
   on insertion vs. on birth vs on divide.
* Traits should know what data needs to be kept (value at previous divide? number of updates?)
* Trait updating should be able to link to signals.
* Updating or accessing a phenotype may happen frequently and should be fast.
* There may be many organisms, so each individual phenotype should be as small as reasonable, but not at the cost of sacrificing the above.

Possibilities:
* Customized traits.
  Each trait object has specialized functions built-in that are implemented by macro.
  static inline std::string GetName() { return "fitness"; }
  double GetFitness() { return fitness; }
* Master controller.
  A controller knows how to replicate a phenotype or apply other operations to it.  Each phenotype instance is just a set of traits.
* Static class information that processes a minimal chunk of code.
