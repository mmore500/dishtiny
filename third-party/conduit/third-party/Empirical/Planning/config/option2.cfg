#############################################################################
#
#  Similar to option1, with the following changes:
#    using '=' instead of ':' for assignments leaving :'s for intuitive scoping.
#    all strings must be in quotes; all non strings are automatically translated.
#    variable types are either "string" or "value" (no parens needed for math)
#    added keywords string and value for type conversions.
#
#############################################################################


VERSION_ID = 2.11.0   # Do not change this value.

### GENERAL_GROUP ###
# What should basic settings look like?
VERBOSITY = 1           # 0 = No output at all
                        # 1 = Normal output
                        # 2 = Verbose output, detailing progress
                        # 3 = High level of details, as available
                        # 4 = Print Debug Information, as applicable
RANDOM_SEED = 0         # Random number seed (0 for based on time)
POPULATION_CAP = 5000   # Carrying capacity in number of organisms (use 0 for no cap)
WORLD_X = 1000          # Width of the world
WORLD_Y = 1000          # Height of the world

# Other configuration Files are simply INCLUDED
CONFIG_DIR = "../config"
include CONFIG_DIR + "/opt1-events.cfg"        # File containing list of events during run
include CONFIG_DIR + "/opt1-analyze.cfg"       # File used for analysis mode
include CONFIG_DIR + "/opt1-environment.cfg"   # File that describes the environment


# What should events looks like:
# If a keyword is NOT followed by a colon, it is assumed to be a new object.
# Objects can have an optional name for later modification.
event { trigger="immediate" ; action="Inject" ; filename="default-heads.org" }

output_freq = 100
event print_ave { trigger="update" ; start=0 ; interval=output_freq ; action="PrintAverageData" }
event print_dom { trigger="update" ; start=0 ; interval=output_freq ; action="PrintDominantData" }
event print_stats { trigger="update" ; start=0 ; interval=output_freq ; action="PrintStatsData" }
event { trigger="update" ; start=100000 ; action="Exit" }


# Within parentheses, math can be done.  When the outer-most parentheses are closed, the
# resulting value is treated like a string.
PARASITE_INJECT_COUNT = POPULATION_CAP / 5
event { trigger="no_parasites" ; action="InjectParasite" ; repeat=PARASITE_INJECT_COUNT }

inst_set test_is {
  # No-ops
  inst { name="nop-A"; call="Nop"; as_arg=0; desc="No-operation instruction; acts as argument 0" }
  inst { name="nop-B"; call="Nop"; as_arg=1; desc="No-operation instruction; acts as argument 1" }
  inst { name="nop-C"; call="Nop"; as_arg=2; desc="No-operation instruction; acts as argument 2" }

  inst { name="Push-3"; call="PushValue"; arg1=3; weight=0.01; desc="Push 3 on the stack" }

  # Flow control operations
  inst { call="If-n-equ" }      # Use all defaults for "If-n-equ" function.
  inst { call="IfLess" }        #
  inst { call="IfLabel" }       #
  inst { call="MoveHead" }      #
  inst { call="JumpHead" }      #
  inst { call="GetHead" }       #
  inst { call="SetFlow" }       #
}

# We can also have conditionals
if CONFIG_DIR == "../config"
  print "Default config directory used."
endif


# Or while loops.
org_id = 0
while (org_id < 10)
  filename = CONFIG_DIR + "/Input" + string(ord_id) + ".org"
  event { trigger="immediate" ; action="Inject" ; filename=::filename }
  org_id += 1
endwhile
