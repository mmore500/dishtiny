#############################################################################
#
#  What if braces always change scope AND build an object with the variables
#  defined in that scope?
#
#  Then, for something like Avida, you could have events as one of the
#  pre-built objects that you just modify with the actual events you want to
#  run.
#
#  Putting an object in a foreach would allow you to step through all of
#  its members.  Every object would have a reserved member ("name"?) for its
#  main identifier and perhaps other ("parent" for the parent object; "this"
#  for this object, "size" for the number of elements contained.)
#
#  If a variable is first used with an index, it is created as an array of
#  whatever type is passed in (implemented internally as a map from values)
#
#############################################################################


VERSION_ID = "2.11.0"   # Do not change this value.

### GENERAL_GROUP ###
# What should basic settings look like?
VERBOSITY = 1           # 0 = No output at all
                        # 1 = Normal output
                        # 2 = Verbose output, detailing progress
                        # 3 = High level of details, as available
                        # 4 = Print Debug Information, as applicable
RANDOM_SEED = 0         # Random number seed (0 for based on time)
POPULATION_CAP = 5000   # Carrying capacity in number of organisms (use 0 for no cap)
WORLD_X = 1000          # Width of the world
WORLD_Y = 1000          # Height of the world

# Other configuration Files are simply INCLUDED
CONFIG_DIR = "../config"
include CONFIG_DIR + "/opt1-events.cfg"        # File containing list of events during run
include CONFIG_DIR + "/opt1-analyze.cfg"       # File used for analysis mode
include CONFIG_DIR + "/opt1-environment.cfg"   # File that describes the environment


# What should events looks like:
# If a keyword is NOT followed by a colon, it is assumed to be a new object.
# Objects can have an optional name for later modification.
events.init = { trigger="immediate" ; action="Inject" ; filename="default-heads.org" }

out_freq = 100
events.print_ave = { trigger="update" ; start=0 ; interval=out_freq ; action="PrintAverageData" }
events.print_dom = { trigger="update" ; start=0 ; interval=out_freq ; action="PrintDominantData" }
events.print_stats = { trigger="update" ; start=0 ; interval=out_freq ; action="PrintStatsData" }
events.exit = { trigger="update" ; start=100000 ; action="Exit" }


# Within parentheses, math can be done.  When the outer-most parentheses are closed, the
# resulting value is treated like a string.
PARASITE_INJECT_COUNT = POPULATION_CAP / 5
events.keep_pars = { trigger="no_parasites"
                     action="InjectParasite"
                     repeat=PARASITE_INJECT_COUNT
                   }

inst_sets.test_is = {
  # No-ops
  nop-A = { call="Nop"; as_arg=0; desc="No-operation instruction; acts as argument 0" }
  nop-B = { call="Nop"; as_arg=1; desc="No-operation instruction; acts as argument 1" }
  nop-C = { call="Nop"; as_arg=2; desc="No-operation instruction; acts as argument 2" }

  Push3 = { call="PushValue"; arg1=3; weight=0.01; desc="Push 3 on the stack" }

  # Flow control operations
  If_n_equ = { call="If-n-equ" }      # Use all defaults for "If-n-equ" function.
  IfLess = { call="IfLess" }          #
  IfLabel = { call="IfLabel" }        #
  MoveHead = { call="MoveHead" }      #
  JumpHead = { call="JumpHead" }      #
  GetHead = { call="GetHead" }        #
  SetFlow = { call="SetFlow" }        #
}

# We can also have conditionals
if (CONFIG_DIR == "../config") {            # Objects from unnamed braces are discarded
  print "Default config directory used."
}


# Or while loops.
org_id = 0
while (org_id < 10) {
  filename = CONFIG_DIR + "/Input" + string(ord_id) + ".org"
  events.inject_org[org_id] = { trigger="immediate" ; action="Inject" ; filename=::filename }
  org_id += 1
}
