#!/bin/bash -login
########## Define Resources Needed with SBATCH Lines ##########
#SBATCH --time=4:00:00
#SBATCH --job-name a=nopout+series={{ series }}+stint={{ stint }}
#SBATCH --account=devolab
#SBATCH --output="/mnt/home/mmore500/slurmlogs/a=nopout+job=%j+series={{ series }}+stint={{ stint }}+ext.log"
#SBATCH --mem=16G
#SBATCH --ntasks 1
#SBATCH --cpus-per-task 4
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=mmore500@msu.edu

################################################################################
echo
echo "running nopoutjob.slurm.sh"
echo "--------------------------"
################################################################################

# fail on error
set -e

# specify display, start the Xvfb server, and save the process ID
# adapted from https://wiki.hpcc.msu.edu/display/~colbrydi@msu.edu/2013/10
export DISPLAY=":${SLURM_JOB_ID-1}"
rm -f "/tmp/.X11-unix/X${SLURM_JOB_ID-1}"
rm -f "/tmp/.X${SLURM_JOB_ID-1}-lock"
Xvfb "${DISPLAY}" -auth /dev/null/ &
export XVFB_PID=$!

# set up and jump into temporary work directory
cd "$(mktemp -d)"

# curl repro_runner.sh script into to a temporary file
REPRO_RUNNER="$(mktemp)"
for retry in {1..20}; do
  curl \
    -o "${REPRO_RUNNER}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/repro_runner.sh" \
  && echo "  repro_runner curl success" && break \
  || (echo "retrying repro_runner curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "repro_runner curl fail" && exit 123123; fi
done
chmod +x "${REPRO_RUNNER}"

################################################################################
echo
echo "Run Job with repro_runner.sh"
echo "--------------------------------"
################################################################################

"${REPRO_RUNNER}" \
  -p dnh2v -u mmore500 -s dishtiny \
  --repo_sha "{{ repo_sha }}" --container_tag "{{ container_tag }}" \
  << 'REPRO_RUNNER_HEREDOC_EOF'

# fail on error
set -e

################################################################################
echo
echo "running nopoutjob.slurm.sh"
echo "--------------------------"
################################################################################

################################################################################
echo
echo "Initialize and Log Config"
echo "-------------------------"
################################################################################

# load secrets into environment variables, if available
[[ -f ~/.secrets.sh ]] && source ~/.secrets.sh || echo "~/secrets.sh not found"

ENDEAVOR={{ series | int // 1000 }}

echo "ENDEAVOR ${ENDEAVOR}"
echo "series {{ series }}"
echo "stint {{ stint }}"
echo "container_tag {{ container_tag }}"
echo "repo_sha {{ repo_sha }}"

################################################################################
echo
echo "Set Up Work Directory"
echo "-------------------------"
################################################################################

mkdir work
cd work

WORK_DIRECTORY="$(pwd)"
echo "WORK_DIRECTORY ${WORK_DIRECTORY}"

echo "downloading genome from target stint and series..."

f="a=genome+criteria=abundance+morph=wildtype+proc=0+series={{ series }}+stint={{ stint }}+thread=0+variation=master+ext=.json.gz"
echo "downloading ${f}"
for retry in {1..20}; do
  aws s3 cp --quiet \
    "s3://dnh2v/endeavor=${ENDEAVOR}/genomes/stint={{ stint }}/series={{ series }}/stage=0+what=generated/${f}" \
    "${f}" \
    && echo "  ${f} download success" && break \
    || (echo "retrying ${f} download (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "${f} download fail" && exit 123123; fi
done & pids+=($!)

make production -C ../dishtiny/
cp ../dishtiny/rundishtiny .

# compile and download concurrently!
for pid in "${pids[@]}"; do
  # if child process fails, we fail
  wait "${pid}"
done

unset pids

################################################################################
echo
echo "Run Simulation"
echo "------------------"
################################################################################

# note:
# we have to cut off stdin, stdout, stderr on mpiexec
# for compatibility with repro_runner.sh and prevent a funky
# tee: read error: Resource temporarily unavailable
# ssh accomplishes this right now, but otherwise something else would be needed

# use ssh to access host then launch mpi jobs there (e.g., "hybrid approach")
# see https://sylabs.io/guides/3.3/user-guide/mpi.html

# have to use login shell so module command loads correctly

sshpass -p "${HOST_PASSWORD}" \
ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
  "${HOST_USERNAME}@$(hostname)" -X 'bash -login'\
<< MPIEXEC_HEREDOC_EOF
  [[ -f ~/.secrets.sh ]] && source ~/.secrets.sh
  module load --ignore-cache GCC/7.2.0-2.29 MPICH/3.2.1|| :
  module list || :
  echo "modules loaded..."
  export DISPLAY="${DISPLAY}"
  export XVFB_PID="${XVFB_PID}"
  export REPRO_ID="${REPRO_ID}"
  mpiexec.hydra --version
  mpiexec.hydra -n 1 \
  singularity exec --pwd "$(pwd)" "${SINGULARITY_CONTAINER}" \
    ./rundishtiny \
    -RUN 0 -GENESIS "monoculture" -ARTIFACTS_DUMP 1 -PHENOTYPE_EQUIVALENT_NOPOUT 1 -STINT {{ stint }} -SERIES {{ series }} -THROW_ON_EXTINCTION 0 {{ "-PHENOTYPIC_DIVERGENCE_N_CELLS 16 -PHENOTYPIC_DIVERGENCE_N_UPDATES 16" if series | int < 1000 else "-PHENOTYPIC_DIVERGENCE_N_CELLS 64 -PHENOTYPIC_DIVERGENCE_N_UPDATES 256" if series | int < 10000 else "" }} \
  && echo "simulation exit success" \
  || ( echo "simulation error code $?" && exit 1 )
MPIEXEC_HEREDOC_EOF

################################################################################
echo
echo "Upload Data"
echo "--------------"
################################################################################

echo "uploading any genome files..."
for p in \
  outartifacts/*a=genome*morph=phenotype_equivalent_nopout* \
  outdata/*a=genome_statistics*morph=phenotype_equivalent_nopout* \
  outdata/*a=nopout_divergence_updates* \
; do
  f="$(basename "${p}")"
  echo "uploading ${p} -> ${f}"
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/genomes/stint={{ stint }}/series={{ series }}/stage=1+what=generated/${f}" \
    && echo "  $f upload success" && break \
      || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "$f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done

# wait on all forked upload jobs
for pid in "${pids[@]}"; do
  # if child process fails, we fail
  wait "${pid}"
done

unset pids

#===============================================================================
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#===============================================================================
# dispatch fitness complexity competitions only every twentieth stint
if (( {{ stint }} % 20 == 0 )); then
echo
echo "Dispatching Fitness Complexity Competitions"
echo "==========================================="

(
cd "$(mktemp -d)"
pwd

#===============================================================================
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#===============================================================================

PHENOTYPE_EQUIVALENT_GENOME="$(ls "${WORK_DIRECTORY}"/outartifacts/*a=genome*morph=phenotype_equivalent_nopout*.json.gz)"
echo "PHENOTYPE_EQUIVALENT_GENOME ${PHENOTYPE_EQUIVALENT_GENOME}"

################################################################################
echo
echo "Generate Nopped Op Variants of phenotype_equivalent_nopout"
echo "----------------------------------------------------------"
################################################################################

# adapted from https://superuser.com/a/689340
# and https://stackoverflow.com/a/31687663
wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/make_nopped_op_variants.py | python3 - "${PHENOTYPE_EQUIVALENT_GENOME}"

################################################################################
echo
echo "Upload Nopped Op Variants of phenotype_equivalent_nopout"
echo "--------------------------------------------------------"
################################################################################

shopt -s nullglob

echo "uploading any genome files..."
for p in *a=genome*morph=phenotype_equivalent_nopout*variation=* ; do
  f="$(basename "${p}")"
  echo "uploading ${p} -> ${f}"
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/genomes/stint={{ stint }}/series={{ series }}/stage=1+what=generated/${f}" \
    && echo "  $f upload success" && break \
      || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "$f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done

# wait on all forked upload jobs
for pid in "${pids[@]}"; do
  # if child process fails, we fail
  wait "${pid}"
done

unset pids

shopt -u nullglob

################################################################################
echo
echo "Get Runscript Template"
echo "----------------------------------------"
################################################################################

# run jinja on template
JOB_TEMPLATE="$(mktemp)"
echo "JOB_TEMPLATE ${JOB_TEMPLATE}"

for retry in {1..20}; do
  curl \
    -o "${JOB_TEMPLATE}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/competition/competitionjob.slurm.sh.jinja" \
  && echo "  job template curl success" && break \
  || (echo "retrying job template curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "job template curl fail" && exit 123123; fi
done

################################################################################
echo
echo "Generate WT vs WT Competition Runscripts"
echo "----------------------------------------"
################################################################################

wt=$(basename "${PHENOTYPE_EQUIVALENT_GENOME}")

for REPLICATE in {0..19}; do

JOB_SCRIPT="$( \
  keyname pack --a "wt_vs_wt" --replicate "${REPLICATE}" --ext ".slurm.sh" \
)"

j2 --format=yaml -o "${JOB_SCRIPT}" "${JOB_TEMPLATE}" << J2_HEREDOC_EOF
container_tag: {{ container_tag }}
repo_sha: {{ repo_sha }}
first_competitor_url: "s3://dnh2v/endeavor=${ENDEAVOR}/genomes/stint={{ stint }}/series={{ series }}/stage=1+what=generated/${wt}"
second_competitor_url: "s3://dnh2v/endeavor=${ENDEAVOR}/genomes/stint={{ stint }}/series={{ series }}/stage=1+what=generated/${wt}"
output_url: "s3://dnh2v/endeavor=${ENDEAVOR}/variant-competitions/stint={{ stint }}/series={{ series }}/stage=2+what=generated/"
replicate: "${REPLICATE}"
endeavor: "${ENDEAVOR}"
stint: {{ stint }}
series: {{ series }}
J2_HEREDOC_EOF

chmod +x "${JOB_SCRIPT}"

done # for REPLICATE in {0..19}; do

################################################################################
echo
echo "Generate WT vs Variant Competition Runscripts"
echo "---------------------------------------------"
################################################################################

shopt -s nullglob

wt=$(basename "${PHENOTYPE_EQUIVALENT_GENOME}")

for variant in *a=genome*morph=phenotype_equivalent_nopout*variation=* ; do

echo "variant ${variant}"

variation="$(echo "${variant}" | keyname extract variation)"
echo "variation ${variation}"

JOB_SCRIPT="$( keyname pack \
  --a "wt_vs_variant" --variation "${variation}" --ext ".slurm.sh" \
)"

j2 --format=yaml -o "${JOB_SCRIPT}" "${JOB_TEMPLATE}" << J2_HEREDOC_EOF
container_tag: {{ container_tag }}
repo_sha: {{ repo_sha }}
first_competitor_url: "s3://dnh2v/endeavor=${ENDEAVOR}/genomes/stint={{ stint }}/series={{ series }}/stage=1+what=generated/${wt}"
second_competitor_url: "s3://dnh2v/endeavor=${ENDEAVOR}/genomes/stint={{ stint }}/series={{ series }}/stage=1+what=generated/${variant}"
output_url: "s3://dnh2v/endeavor=${ENDEAVOR}/variant-competitions/stint={{ stint }}/series={{ series }}/stage=2+what=generated/"
replicate: 0
endeavor: "${ENDEAVOR}"
stint: {{ stint }}
series: {{ series }}
J2_HEREDOC_EOF

chmod +x "${JOB_SCRIPT}"

done

shopt -u nullglob

################################################################################
echo
echo "Bundle and Submit Generated Runscripts"
echo "--------------------------------------"
################################################################################

echo "num generated runscripts $(ls *.slurm.sh | wc -l)"

# uses slurm stoker script, which zips all runscripts in the current directory
# inside itself, then submits itself as a job to gradually feed runscripts onto
# the queue

# adapted from https://superuser.com/a/689340
# and https://stackoverflow.com/a/4642975
wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/slurm_stoker_containerized_kickoff.sh | bash -s {{ container_tag }} {{ repo_sha }}

#===============================================================================
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#===============================================================================
) # leave temporary work directory
fi # run fitness complexity competitions only every Xth stint
#===============================================================================
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#===============================================================================

################################################################################
echo
echo "Done! (SUCCESS)"
echo "---------------"
################################################################################

REPRO_RUNNER_HEREDOC_EOF
