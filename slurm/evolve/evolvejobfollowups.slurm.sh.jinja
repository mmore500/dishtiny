#!/bin/bash -login
########## Define Resources Needed with SBATCH Lines ##########
#SBATCH --time=4:00:00
#SBATCH --job-name a=evolve+series={{ series }}+stint={{ stint }}
#SBATCH --account=devolab
#SBATCH --output="/mnt/scratch/%u/slurmlogs/a=evolve+job=%j+series={{ series }}+stint={{ stint }}+ext.log"
#SBATCH --mem=24G
#SBATCH --ntasks 1
#SBATCH --cpus-per-task 4
#SBATCH --mail-type=FAIL
# No --mail-user, the default value is the submitting user
#SBATCH --exclude=csn-002,amr-250
# Send interrupt when within 5 minutes of end time.
#SBATCH --signal=SIGINT@300
# Job may be requeued after node failure.
#SBATCH --requeue

################################################################################
echo
echo "running evolvejobfollowups.slurm.sh"
echo "--------------------------"
################################################################################

# fail on error
set -e
# adapted from https://unix.stackexchange.com/a/504829
printerr() {
    echo "Error occurred:"
    awk 'NR>L-4 && NR<L+4 { printf "%-5d%3s%s\n",NR,(NR==L?">>>":""),$0 }' L=$1 $0
}
trap 'printerr $LINENO' ERR

# specify display, start the Xvfb server, and save the process ID
# adapted from https://wiki.hpcc.msu.edu/display/~colbrydi@msu.edu/2013/10
export DISPLAY=":${SLURM_JOB_ID-1}"
rm -f "/tmp/.X11-unix/X${SLURM_JOB_ID-1}"
rm -f "/tmp/.X${SLURM_JOB_ID-1}-lock"
Xvfb "${DISPLAY}" -auth /dev/null/ &
export XVFB_PID=$!

# set up and jump into temporary work directory
cd "$(mktemp -d)"

# curl repro_runner.sh script into to a temporary file
REPRO_RUNNER="$(mktemp)"
for retry in {1..20}; do
  curl \
    -o "${REPRO_RUNNER}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/repro_runner.sh" \
  && echo "  repro_runner curl success" && break \
  || (echo "retrying repro_runner curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "repro_runner curl fail" && exit 123123; fi
done
chmod +x "${REPRO_RUNNER}"

################################################################################
echo
echo "Run Job with repro_runner.sh"
echo "--------------------------------"
################################################################################

"${REPRO_RUNNER}" \
  -p "{{ bucket }}" -u mmore500 -s dishtiny \
  --repo_sha "{{ repo_sha }}" --container_tag "{{ container_tag }}" \
  << 'REPRO_RUNNER_HEREDOC_EOF'

################################################################################
echo
echo "running evolvejobfollowups.slurm.sh"
echo "--------------------------"
################################################################################

# fail on error
set -e
# adapted from https://unix.stackexchange.com/a/504829
printerr() {
    echo "Error occurred:"
    awk 'NR>L-4 && NR<L+4 { printf "%-5d%3s%s\n",NR,(NR==L?">>>":""),$0 }' L=$1 $0
}
trap 'printerr $LINENO' ERR

################################################################################
echo
echo "Initialize and Log Config"
echo "-------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# load secrets into environment variables, if available
[[ -f ~/.secrets.sh ]] && source ~/.secrets.sh || echo "~/secrets.sh not found"

ENDEAVOR={{ series | int // 1000 }}
GENESIS="{{ "generate" if stint | int == 0 else "reconstitute" }}"
N_PROCS=1
N_THREADS=4

echo "ENDEAVOR ${ENDEAVOR}"
echo "GENESIS ${GENESIS}"
echo "N_PROCS ${N_PROCS}"
echo "N_THREADS ${N_THREADS}"
echo "series {{ series }}"
echo "stint {{ stint }}"
echo "configpack {{ configpack }}"
echo "container_tag {{ container_tag }}"
echo "repo_sha {{ repo_sha }}"

################################################################################
echo
echo "Set Up Work Directory"
echo "-------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

mkdir work
cd work

################################################################################
echo
echo "Submit Nopout Job"
echo "---------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run nopout job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

# run jinja on template
JOB_TEMPLATE="$(mktemp)"
JOB_SCRIPT="$(mktemp)"

echo "JOB_TEMPLATE ${JOB_TEMPLATE}"
echo "JOB_SCRIPT ${JOB_SCRIPT}"

for retry in {1..20}; do
  curl \
    -o "${JOB_TEMPLATE}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/genomes/nopoutjob.slurm.sh.jinja" \
  && echo "  job template curl success" && break \
  || (echo "retrying job template curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "job template curl fail" && exit 123123; fi
done

j2 --format=yaml -o "${JOB_SCRIPT}" "${JOB_TEMPLATE}" << J2_HEREDOC_EOF
bucket: {{ bucket }}
configpack: {{ configpack }}
container_tag: {{ container_tag }}
repo_sha: {{ repo_sha }}
series: {{ series }}
stint: {{ stint | int }}
J2_HEREDOC_EOF

chmod +x "${JOB_SCRIPT}"

# adapted from https://superuser.com/a/689340
# and https://stackoverflow.com/a/4642975
wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/host_sbatch.sh" | bash -s "${JOB_SCRIPT}"

fi

################################################################################
echo
echo "Submit Monoculture Job"
echo "---------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run monoculture job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

# run jinja on template
JOB_TEMPLATE="$(mktemp)"
JOB_SCRIPT="$(mktemp)"

echo "JOB_TEMPLATE ${JOB_TEMPLATE}"
echo "JOB_SCRIPT ${JOB_SCRIPT}"

for retry in {1..20}; do
  curl \
    -o "${JOB_TEMPLATE}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/monocultures/monoculturejob.slurm.sh.jinja" \
  && echo "  job template curl success" && break \
  || (echo "retrying job template curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "job template curl fail" && exit 123123; fi
done

j2 --format=yaml -o "${JOB_SCRIPT}" "${JOB_TEMPLATE}" << J2_HEREDOC_EOF
bucket: {{ bucket }}
configpack: {{ configpack }}
container_tag: {{ container_tag }}
repo_sha: {{ repo_sha }}
series: {{ series }}
stint: {{ stint | int }}
J2_HEREDOC_EOF

chmod +x "${JOB_SCRIPT}"

# adapted from https://superuser.com/a/689340
# and https://stackoverflow.com/a/4642975
wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/host_sbatch.sh" | bash -s "${JOB_SCRIPT}"

fi

################################################################################
echo
echo "Create SLURM_STOKER_CONSOLIDATION_DIR"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# so that we can consolidate subsequent kickoffs into one slurm stoker job

export SLURM_STOKER_CONSOLIDATION_DIR="$(mktemp -d)"
echo "SLURM_STOKER_CONSOLIDATION_DIR ${SLURM_STOKER_CONSOLIDATION_DIR}"

################################################################################
echo
echo "Submit Predecessor Battle Jobs"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run predecessor battle job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

for retry in {1..20}; do
  # adapted from https://backreference.org/2011/08/10/running-local-script-remotely-with-arguments/
  ( echo "export SLURM_STOKER_CONSOLIDATION_DIR=\"${SLURM_STOKER_CONSOLIDATION_DIR}\""; echo "export REPRO_ID=\"${REPRO_ID}\""; wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/competition/predecessorbattlekickoff.sh" ) | sshpass -p "${HOST_PASSWORD}" ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    "${HOST_USERNAME}@$(hostname)" -X \
    'cat | bash -login /dev/stdin "{{ bucket }}" "{{ configpack }}" "{{ container_tag }}" "{{ repo_sha }}" "{{ stint }}" "{{ series }}"' \
    && echo "  predecessor kickoff success" && break \
    || (echo "retrying predecessor kickoff (${retry})" && sleep $((RANDOM % 10)))

  if ((${retry}==20)); then echo "predecessor kickoff fail" && exit 123123; fi
done

fi

################################################################################
echo
echo "Submit Control Competition Jobs"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run control competition job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

for retry in {1..20}; do
  # adapted from https://backreference.org/2011/08/10/running-local-script-remotely-with-arguments/
  ( echo "export SLURM_STOKER_CONSOLIDATION_DIR=\"${SLURM_STOKER_CONSOLIDATION_DIR}\""; echo "export REPRO_ID=\"${REPRO_ID}\""; wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/competition/controlcompetitionkickoff.sh" ) | sshpass -p "${HOST_PASSWORD}" ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    "${HOST_USERNAME}@$(hostname)" -X \
    'cat | bash -login /dev/stdin "{{ bucket }}" "{{ configpack }}" "{{ container_tag }}" "{{ repo_sha }}" "{{ stint }}" "{{ series }}"' \
    && echo "  control kickoff success" && break \
    || (echo "retrying control kickoff (${retry})" && sleep $((RANDOM % 10)))

  if ((${retry}==20)); then echo "control kickoff fail" && exit 123123; fi
done

fi

################################################################################
echo
echo "Submit Doubling Time Jobs"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run doubling time job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

for retry in {1..20}; do
  # adapted from https://backreference.org/2011/08/10/running-local-script-remotely-with-arguments/
  ( echo "export SLURM_STOKER_CONSOLIDATION_DIR=\"${SLURM_STOKER_CONSOLIDATION_DIR}\""; echo "export REPRO_ID=\"${REPRO_ID}\""; wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/doubling-time/wildtypedoubling-timekickoff.sh" ) | sshpass -p "${HOST_PASSWORD}" ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    "${HOST_USERNAME}@$(hostname)" -X \
    'cat | bash -login /dev/stdin "{{ bucket }}" "{{ configpack }}" "{{ container_tag }}" "{{ repo_sha }}" "{{ stint }}" "{{ series }}"' \
    && echo "  doubling time kickoff success" && break \
    || (echo "retrying doubling time kickoff (${retry})" && sleep $((RANDOM % 10)))

  if ((${retry}==20)); then
    echo "doubling time kickoff fail" && exit 123123
  fi
done

fi

################################################################################
echo
echo "Submit Mutating Competition Jobs"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run mutating competition job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

for retry in {1..20}; do
  # adapted from https://backreference.org/2011/08/10/running-local-script-remotely-with-arguments/
  ( echo "export SLURM_STOKER_CONSOLIDATION_DIR=\"${SLURM_STOKER_CONSOLIDATION_DIR}\""; echo "export REPRO_ID=\"${REPRO_ID}\""; wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/competition/mutatingcompetitionkickoff.sh" ) | sshpass -p "${HOST_PASSWORD}" ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    "${HOST_USERNAME}@$(hostname)" -X \
    'cat | bash -login /dev/stdin "{{ bucket }}" "{{ configpack }}" "{{ container_tag }}" "{{ repo_sha }}" "{{ stint }}" "{{ series }}"' \
    && echo "  mutating competition kickoff success" && break \
    || (echo "retrying mutating competition kickoff (${retry})" && sleep $((RANDOM % 10)))

  if ((${retry}==20)); then
    echo "mutating competition kickoff fail" && exit 123123
  fi
done

fi

################################################################################
echo
echo "Submit Mutant Competition Jobs"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run mutating competition job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

for retry in {1..20}; do
  # adapted from https://backreference.org/2011/08/10/running-local-script-remotely-with-arguments/
  ( echo "export SLURM_STOKER_CONSOLIDATION_DIR=\"${SLURM_STOKER_CONSOLIDATION_DIR}\""; echo "export REPRO_ID=\"${REPRO_ID}\""; wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/competition/mutantcompetitionkickoff.sh" ) | sshpass -p "${HOST_PASSWORD}" ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    "${HOST_USERNAME}@$(hostname)" -X \
    'cat | bash -login /dev/stdin "{{ bucket }}" "{{ configpack }}" "{{ container_tag }}" "{{ repo_sha }}" "{{ stint }}" "{{ series }}"' \
    && echo "  mutant competition kickoff success" && break \
    || (echo "retrying mutant competition kickoff (${retry})" && sleep $((RANDOM % 10)))

  if ((${retry}==20)); then
    echo "mutant competition kickoff fail" && exit 123123
  fi
done

fi

################################################################################
echo
echo "Submit Mutant Phenotype Differentiation Jobs"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run mutating phenotype-differentiation job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

for retry in {1..20}; do
  # adapted from https://backreference.org/2011/08/10/running-local-script-remotely-with-arguments/
  ( echo "export SLURM_STOKER_CONSOLIDATION_DIR=\"${SLURM_STOKER_CONSOLIDATION_DIR}\""; echo "export REPRO_ID=\"${REPRO_ID}\""; wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/phenotype-differentiation/mutantphenotype-differentiationkickoff.sh" ) | sshpass -p "${HOST_PASSWORD}" ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    "${HOST_USERNAME}@$(hostname)" -X \
    'cat | bash -login /dev/stdin "{{ bucket }}" "{{ configpack }}" "{{ container_tag }}" "{{ repo_sha }}" "{{ stint }}" "{{ series }}"' \
    && echo "  mutant phenotype-differentiation kickoff success" && break \
    || (echo "retrying mutant phenotype-differentiation kickoff (${retry})" && sleep $((RANDOM % 10)))

  if ((${retry}==20)); then
    echo "mutant phenotype-differentiation kickoff fail" && exit 123123
  fi
done

fi

################################################################################
echo
echo "Submit Perturbation Competition Jobs"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run mutating competition job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

for perturbation_target in extrospective introspective writable; do
for perturbation_method in exchange rotate; do

echo "perturbation_target ${perturbation_target}"
echo "perturbation_method ${perturbation_method}"

for retry in {1..20}; do
  # adapted from https://backreference.org/2011/08/10/running-local-script-remotely-with-arguments/
  ( echo "export SLURM_STOKER_CONSOLIDATION_DIR=\"${SLURM_STOKER_CONSOLIDATION_DIR}\""; echo "export REPRO_ID=\"${REPRO_ID}\""; wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/competition/perturbationcompetitionkickoff.sh" ) | sshpass -p "${HOST_PASSWORD}" ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    "${HOST_USERNAME}@$(hostname)" -X \
    "cat | bash -login /dev/stdin '{{ bucket }}' '{{ configpack }}' '{{ container_tag }}' '{{ repo_sha }}' \"${perturbation_target}\" \"${perturbation_method}\" 1 \"{0..$(./rundishtiny "-print_${perturbation_target}_state_size_minus_one" )}\" '{{ stint }}' '{{ series }}'" \
    && echo "  perturbation competition kickoff success" && break \
    || (echo "retrying perturbation competition kickoff (${retry})" && sleep $((RANDOM % 10)))

  if ((${retry}==20)); then
    echo "perturbation competition kickoff fail" && exit 123123
  fi
done

done
done

fi

################################################################################
echo
echo "Submit SelfSend Competition Jobs"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

# run mutating competition job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

for selfsend_target in inter intra; do

echo "selfsend_target ${selfsend_target}"

for retry in {1..20}; do
  # adapted from https://backreference.org/2011/08/10/running-local-script-remotely-with-arguments/
  ( echo "export SLURM_STOKER_CONSOLIDATION_DIR=\"${SLURM_STOKER_CONSOLIDATION_DIR}\""; echo "export REPRO_ID=\"${REPRO_ID}\""; wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/competition/selfsendcompetitionkickoff.sh" ) | sshpass -p "${HOST_PASSWORD}" ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    "${HOST_USERNAME}@$(hostname)" -X \
    "cat | bash -login /dev/stdin '{{ bucket }}' '{{ configpack }}' '{{ container_tag }}' '{{ repo_sha }}' \"${selfsend_target}\" 20 '{{ stint }}' '{{ series }}'" \
    && echo "  selfsend competition kickoff success" && break \
    || (echo "retrying selfsend competition kickoff (${retry})" && sleep $((RANDOM % 10)))

  if ((${retry}==20)); then
    echo "selfsend competition kickoff fail" && exit 123123
  fi
done

done

fi

################################################################################
echo
echo "Submit slurm scripts from SLURM_STOKER_CONSOLIDATION_DIR"
echo "-----------------------------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

echo "${SLURM_STOKER_CONSOLIDATION_DIR}"
cd "${SLURM_STOKER_CONSOLIDATION_DIR}"
pwd

# if there are follow up jobs
if ls *.slurm.sh 1> /dev/null 2>&1; then

wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/slurm_stoker_containerized_kickoff.sh" | bash -s "{{ bucket }}" "{{ container_tag }}" "{{ repo_sha }}" "evolvejob-consolidated-followups~series%{{ series }}~stint%{{ stint }}"

else

echo "no follow up jobs to submit"

fi

cd -

################################################################################
echo
echo "Done! (SUCCESS)"
echo "---------------"
################################################################################

timeout 30s "${REPRO_WORK_DIRECTORY}/dishtiny/script/host_squeue.sh" -j "${SLURM_JOB_ID}" --format \"time: %M, time left: %L\" --noheader || echo "time log failed"

REPRO_RUNNER_HEREDOC_EOF
