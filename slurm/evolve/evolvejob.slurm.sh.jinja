#!/bin/bash -login
########## Define Resources Needed with SBATCH Lines ##########
#SBATCH --time=4:00:00
#SBATCH --job-name a=evolve+series={{ series }}+stint={{ stint }}
#SBATCH --account=devolab
#SBATCH --output="/mnt/home/mmore500/slurmlogs/a=evolve+job=%j+series={{ series }}+stint={{ stint }}+ext.log"
#SBATCH --mem=16G
#SBATCH --ntasks 1
#SBATCH --cpus-per-task 4
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=mmore500@msu.edu

################################################################################
echo
echo "running evolvejob.slurm.sh"
echo "--------------------------"
################################################################################

# fail on error
set -e

# specify display, start the Xvfb server, and save the process ID
# adapted from https://wiki.hpcc.msu.edu/display/~colbrydi@msu.edu/2013/10
export DISPLAY=":${SLURM_JOB_ID-1}"
rm -f "/tmp/.X11-unix/X${SLURM_JOB_ID-1}"
rm -f "/tmp/.X${SLURM_JOB_ID-1}-lock"
Xvfb "${DISPLAY}" -auth /dev/null/ &
export XVFB_PID=$!

# set up and jump into temporary work directory
cd "$(mktemp -d)"

# curl repro_runner.sh script into to a temporary file
REPRO_RUNNER="$(mktemp)"
for retry in {1..20}; do
  curl \
    -o "${REPRO_RUNNER}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/repro_runner.sh" \
  && echo "  repro_runner curl success" && break \
  || (echo "retrying repro_runner curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "repro_runner curl fail" && exit 123123; fi
done
chmod +x "${REPRO_RUNNER}"

################################################################################
echo
echo "Run Job with repro_runner.sh"
echo "--------------------------------"
################################################################################

"${REPRO_RUNNER}" \
  -p dnh2v -u mmore500 -s dishtiny \
  --repo_sha "{{ repo_sha }}" --container_tag "{{ container_tag }}" \
  << 'REPRO_RUNNER_HEREDOC_EOF'

################################################################################
echo
echo "running evolvejob.slurm.sh"
echo "--------------------------"
################################################################################

# fail on error
set -e

################################################################################
echo
echo "Initialize and Log Config"
echo "-------------------------"
################################################################################

# load secrets into environment variables, if available
[[ -f ~/.secrets.sh ]] && source ~/.secrets.sh || echo "~/secrets.sh not found"

ENDEAVOR={{ series | int // 1000 }}
GENESIS="{{ "generate" if stint | int == 0 else "reconstitute" }}"
N_PROCS=1
N_THREADS=4

echo "ENDEAVOR ${ENDEAVOR}"
echo "GENESIS ${GENESIS}"
echo "N_PROCS ${N_PROCS}"
echo "N_THREADS ${N_THREADS}"
echo "series {{ series }}"
echo "stint {{ stint }}"
echo "container_tag {{ container_tag }}"
echo "repo_sha {{ repo_sha }}"

################################################################################
echo
echo "Set Up Work Directory"
echo "-------------------------"
################################################################################

mkdir work
cd work

{% if stint | int > 0 %}
echo "downloading populations from last stint..."
for ((proc=0;proc<N_PROCS;++proc)); do
  for ((thread=0;thread<N_THREADS;++thread)); do
    f="a=population+proc=${proc}+series={{ series }}+stint={{ stint | int - 1 }}+thread=${thread}+variation=master+ext=.bin.xz"
    echo "downloading ${f}"
    for retry in {1..20}; do
      aws s3 cp --quiet \
        "s3://dnh2v/endeavor=${ENDEAVOR}/evolve/populations/stint={{ stint | int - 1 }}/stage=0+what=generated/${f}" \
        "${f}" \
      && echo "  ${f} download success" && break \
      || (echo "retrying ${f} download (${retry})" && sleep $((RANDOM % 10)))
      if ((${retry}==20)); then echo "${f} download fail" && exit 123123; fi
    done & pids+=($!)
  done
done
{% endif %}

make production -C ../dishtiny/
cp ../dishtiny/rundishtiny .

# compile and download concurrently!
for pid in "${pids[@]}"; do
  # if child process fails, we fail
  wait "${pid}"
done

unset pids

################################################################################
echo
echo "Run Simulation"
echo "------------------"
################################################################################

# note:
# we have to cut off stdin, stdout, stderr on mpiexec
# for compatibility with repro_runner.sh and prevent a funky
# tee: read error: Resource temporarily unavailable
# ssh accomplishes this right now, but otherwise something else would be needed

# use ssh to access host then launch mpi jobs there (e.g., "hybrid approach")
# see https://sylabs.io/guides/3.3/user-guide/mpi.html

# have to use login shell so module command loads correctly

sshpass -p "${HOST_PASSWORD}" \
ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
  "${HOST_USERNAME}@$(hostname)" -X 'bash -login'\
<< MPIEXEC_HEREDOC_EOF
  [[ -f ~/.secrets.sh ]] && source ~/.secrets.sh
  module load --ignore-cache GCC/7.2.0-2.29 MPICH/3.2.1|| :
  module list || :
  echo "modules loaded..."
  export REPRO_ID="${REPRO_ID}"
  export DISPLAY="${DISPLAY}"
  export XVFB_PID="${XVFB_PID}"
  mpiexec.hydra --version
  mpiexec.hydra -n "${N_PROCS}" \
  singularity exec --pwd "$(pwd)" "${SINGULARITY_CONTAINER}" \
    ./rundishtiny \
    -N_THREADS "${N_THREADS}" -RUN_SECONDS {{ 60 if series | int < 1000 else 600 if series | int < 10000 else 10800 }} -GENESIS "${GENESIS}" -ARTIFACTS_DUMP 1 -DATA_DUMP 1 -WEAK_SCALING 1 -N_CELLS 3600 -PHENOTYPE_EQUIVALENT_NOPOUT 0 -STINT {{ stint }} -SERIES {{ series }} \
  && echo "simulation exit success" \
  || ( echo "simulation error code $?" && exit 1 )
MPIEXEC_HEREDOC_EOF

################################################################################
echo
echo "Upload Data"
echo "--------------"
################################################################################

shopt -s nullglob

echo "uploading any population files..."
for p in outartifacts/*a=population*; do
  f="$(basename "${p}")"
  echo "uploading ${f}"
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/evolve/populations/stint={{ stint }}/series={{ series }}/stage=0+what=generated/${f}" \
    && echo "  ${f} upload success" && break \
    || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "  $f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done

echo "uploading any metrics files..."
for p in outdata/*a={demographic_phenotypic_phylogenetic_metrics,kin_conflict_statistics,kin_conflict_by_replev_statistics}*; do
  f="$(basename "${p}")"
  echo "uploading ${p} -> ${f}"
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/evolve/metrics/stint={{ stint }}/series={{ series }}/stage=0+what=generated/${f}" \
    && echo "  ${f} upload success" && break \
    || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "$f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done

# upload every tenth stint
if (( {{ stint }} % 10 == 0 )); then
echo "uploading any running log files..."
for p in outdata/*a={birth_log,death_log,spawn_log}*; do
  f="$(basename "${p}")"
  echo "uploading ${p} -> ${f}"
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/evolve/runninglogs/stint={{ stint }}/series={{ series }}/stage=0+what=generated/${f}" \
    && echo "  ${f} upload success" && break \
    || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "$f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done
fi

# upload every tenth stint
if (( {{ stint }} % 10 == 0 )); then
echo "uploading any census files..."
for p in outdata/*a=cell_census*; do
  f="$(basename "${p}")"
  echo "uploading ${p} -> ${f}";
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/evolve/censuses/stint={{ stint }}/series={{ series }}/stage=0+what=generated/${f}" \
    && echo "  ${f} upload success" && break \
    || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "$f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done
fi

echo "uploading any montage files..."
for p in outdrawings/*a=montage*; do
  f="$(basename "${p}")"
  echo "uploading ${p} -> ${f}"
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/evolve/montages/stint={{ stint }}/series={{ series }}/stage=0+what=generated/${f}" \
    && echo "  ${f} upload success" && break \
    || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "$f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done

# upload every tenth stint
if (( {{ stint }} % 10 == 0 )); then
echo "uploading any drawing archives..."
for p in outzips/*a=drawings*; do
  f="$(basename "${p}")"
  echo "uploading ${p} -> ${f}"
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/evolve/drawings/stint={{ stint }}/series={{ series }}/stage=0+what=generated/${f}" \
    && echo "  ${f} upload success" && break \
    || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "$f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done
fi

echo "uploading any genome files..."
for p in \
  outartifacts/*a=genome* \
  outdata/*a=genome_statistics* \
  outdata/*a=nopout_divergence_updates* \
; do
  f="$(basename "${p}")"
  echo "uploading ${p} -> ${f}"
  for retry in {1..20}; do
    aws s3 cp --quiet \
      "${p}" \
      "s3://dnh2v/endeavor=${ENDEAVOR}/genomes/stint={{ stint }}/series={{ series }}/stage=0+what=generated/${f}" \
    && echo "  ${f} upload success" && break \
    || (echo "retrying ${f} upload (${retry})" && sleep $((RANDOM % 10)))
    if ((${retry}==20)); then echo "$f upload fail" && exit 123123; fi
  done & pids+=($!)

  # limit to twenty concurrent upload jobs
  while (( $(jobs -p | wc -l) > 20 )); do sleep 1; done

done

# wait on all forked upload jobs
for pid in "${pids[@]}"; do
  # if child process fails, we fail
  wait "${pid}"
done

unset pids

shopt -u nullglob


################################################################################
echo
echo "Submit Next Job"
echo "---------------"
################################################################################

# run jinja on template
JOB_TEMPLATE="$(mktemp)"
JOB_SCRIPT="$(mktemp)"

echo "JOB_TEMPLATE ${JOB_TEMPLATE}"
echo "JOB_SCRIPT ${JOB_SCRIPT}"

for retry in {1..20}; do
  curl \
    -o "${JOB_TEMPLATE}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/evolve/evolvejob.slurm.sh.jinja" \
  && echo "  job template curl success" && break \
  || (echo "retrying job template curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "job template curl fail" && exit 123123; fi
done

j2 --format=yaml -o "${JOB_SCRIPT}" "${JOB_TEMPLATE}" << J2_HEREDOC_EOF
container_tag: {{ container_tag }}
repo_sha: {{ repo_sha }}
series: {{ series }}
stint: {{ stint | int + 1 }}
J2_HEREDOC_EOF

chmod +x "${JOB_SCRIPT}"

for retry in {0..20}; do

  if ((${retry}==20)); then echo "  job submit fail" && exit 123123; fi

  sshpass -p "${HOST_PASSWORD}" \
    scp -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
      "${JOB_SCRIPT}" "${HOST_USERNAME}@$(hostname):${JOB_SCRIPT}" \
  && echo "  job script copy success" \
  || (echo "retrying job script copy (${retry})" && sleep $((RANDOM % 10)) && continue)

  echo "sbatch \"${JOB_SCRIPT}\"" \
  | sshpass -p "${HOST_PASSWORD}" \
    ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
      "${HOST_USERNAME}@$(hostname)" -X \
      'bash -login'  \
  && echo "  job submit success" && break \
  || (echo "retrying job submit (${retry})" && sleep $((RANDOM % 10)) && continue)

done

################################################################################
echo
echo "Submit Nopout Job"
echo "---------------"
################################################################################

# run nopout job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

# run jinja on template
JOB_TEMPLATE="$(mktemp)"
JOB_SCRIPT="$(mktemp)"

echo "JOB_TEMPLATE ${JOB_TEMPLATE}"
echo "JOB_SCRIPT ${JOB_SCRIPT}"

for retry in {1..20}; do
  curl \
    -o "${JOB_TEMPLATE}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/genomes/nopoutjob.slurm.sh.jinja" \
  && echo "  job template curl success" && break \
  || (echo "retrying job template curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "job template curl fail" && exit 123123; fi
done

j2 --format=yaml -o "${JOB_SCRIPT}" "${JOB_TEMPLATE}" << J2_HEREDOC_EOF
container_tag: {{ container_tag }}
repo_sha: {{ repo_sha }}
series: {{ series }}
stint: {{ stint | int }}
J2_HEREDOC_EOF

chmod +x "${JOB_SCRIPT}"

for retry in {0..20}; do

  if ((${retry}==20)); then echo "  job submit fail" && exit 123123; fi

  sshpass -p "${HOST_PASSWORD}" \
    scp -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
      "${JOB_SCRIPT}" "${HOST_USERNAME}@$(hostname):${JOB_SCRIPT}" \
  && echo "  job script copy success" \
  || (echo "retrying job script copy (${retry})" && sleep $((RANDOM % 10)) && continue)

  echo "sbatch \"${JOB_SCRIPT}\"" \
  | sshpass -p "${HOST_PASSWORD}" \
    ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
      "${HOST_USERNAME}@$(hostname)" -X \
      'bash -login'  \
  && echo "  job submit success" && break \
  || (echo "retrying job submit (${retry})" && sleep $((RANDOM % 10)) && continue)

done

fi

################################################################################
echo
echo "Submit Monoculture Job"
echo "---------------"
################################################################################

# run monoculture job every tenth stint
if (( {{ stint }} % 10 == 0 )); then

# run jinja on template
JOB_TEMPLATE="$(mktemp)"
JOB_SCRIPT="$(mktemp)"

echo "JOB_TEMPLATE ${JOB_TEMPLATE}"
echo "JOB_SCRIPT ${JOB_SCRIPT}"

for retry in {1..20}; do
  curl \
    -o "${JOB_TEMPLATE}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/slurm/monocultures/monoculturejob.slurm.sh.jinja" \
  && echo "  job template curl success" && break \
  || (echo "retrying job template curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "job template curl fail" && exit 123123; fi
done

j2 --format=yaml -o "${JOB_SCRIPT}" "${JOB_TEMPLATE}" << J2_HEREDOC_EOF
container_tag: {{ container_tag }}
repo_sha: {{ repo_sha }}
series: {{ series }}
stint: {{ stint | int }}
J2_HEREDOC_EOF

chmod +x "${JOB_SCRIPT}"

for retry in {0..20}; do

  if ((${retry}==20)); then echo "  job submit fail" && exit 123123; fi

  sshpass -p "${HOST_PASSWORD}" \
    scp -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
      "${JOB_SCRIPT}" "${HOST_USERNAME}@$(hostname):${JOB_SCRIPT}" \
  && echo "  job script copy success" \
  || (echo "retrying job script copy (${retry})" && sleep $((RANDOM % 10)) && continue)

  echo "sbatch \"${JOB_SCRIPT}\"" \
  | sshpass -p "${HOST_PASSWORD}" \
    ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
      "${HOST_USERNAME}@$(hostname)" -X \
      'bash -login'  \
  && echo "  job submit success" && break \
  || (echo "retrying job submit (${retry})" && sleep $((RANDOM % 10)) && continue)

done

fi

################################################################################
echo
echo "Done! (SUCCESS)"
echo "---------------"
################################################################################

REPRO_RUNNER_HEREDOC_EOF
