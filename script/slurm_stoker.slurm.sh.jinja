#!/bin/bash -login
########## Define Resources Needed with SBATCH Lines ##########
#SBATCH --time=4:00:00
#SBATCH --job-name a=slurm_stoker+paylen={{ payload|length }}
#SBATCH --account=devolab
#SBATCH --output="/mnt/home/mmore500/slurmlogs/a=slurm_stoker+job=%j+ext.log"
#SBATCH --mem=4G
#SBATCH --ntasks 1
#SBATCH --cpus-per-task 1
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=mmore500@msu.edu

################################################################################
echo
echo "running slurm_stoker.slurm.sh"
echo "-----------------------------"
################################################################################

# fail on error
set -e

# set up and jump into temporary work directory
cd "$(mktemp -d)"

# curl repro_runner.sh script into to a temporary file
REPRO_RUNNER="$(mktemp)"
for retry in {1..20}; do
  curl \
    -o "${REPRO_RUNNER}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/repro_runner.sh" \
  && echo "  repro_runner curl success" && break \
  || (echo "retrying repro_runner curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "repro_runner curl fail" && exit 123123; fi
done
chmod +x "${REPRO_RUNNER}"

################################################################################
echo
echo "Run Job with repro_runner.sh"
echo "--------------------------------"
################################################################################

"${REPRO_RUNNER}" \
  -p "{{ bucket }}" -u mmore500 -s dishtiny \
  --repo_sha "{{ repo_sha }}" --container_tag "{{ container_tag }}" \
  << 'REPRO_RUNNER_HEREDOC_EOF'

# fail on error
set -e

################################################################################
echo
echo "running slurm_stoker.slurm.sh"
echo "-----------------------------"
################################################################################

################################################################################
echo
echo "Initialize and Log Config"
echo "-------------------------"
################################################################################

# load secrets into environment variables, if available
[[ -f ~/.secrets.sh ]] && source ~/.secrets.sh || echo "~/secrets.sh not found"

echo "container_tag {{ container_tag }}"
echo "repo_sha {{ repo_sha }}"
echo "payload length {{ payload|length }}"


################################################################################
echo
echo "Extract payload of slurm scripts"
echo "--------------------------------"
################################################################################

# adapted from https://unix.stackexchange.com/a/389007
uudecode << "PAYLOAD_HEREDOC_CLOSE" | gunzip | tar -vxpf -
{{ payload }}
PAYLOAD_HEREDOC_CLOSE

ls

################################################################################
echo
echo "Submit jobs into available slots"
echo "--------------------------------"
################################################################################


echo "$(ls *.slurm.sh | wc -l) jobs to submit"

for JOB_SCRIPT in *.slurm.sh; do

  # this will count one too many slots occupied, but that is okay
  OCCUPIED_SLOTS=$(echo "squeue -u \$(whoami) | wc -l" \
  | sshpass -p "${HOST_PASSWORD}" \
    ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
      "${HOST_USERNAME}@$(hostname)" -X \
      'bash -login' \
  )
  AVAILABLE_SLOTS=600
  if (( OCCUPIED_SLOTS > AVAILABLE_SLOTS )); then
    echo "OCCUPIED_SLOTS ${OCCUPIED_SLOTS}"
    echo "all ${AVAILABLE_SLOTS} AVAILABLE_SLOTS occupied"
    echo "breaking out of job submission loop"
    echo "$(ls *.slurm.sh | wc -l) jobs left to submit"
    break
  fi

  # adapted from https://superuser.com/a/689340
  # and https://stackoverflow.com/a/4642975
  wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/host_sbatch.sh | bash -s "${JOB_SCRIPT}" && rm -f "${JOB_SCRIPT}" && echo "${JOB_SCRIPT} submitted"

done

################################################################################
echo
echo "Zip up remaining jobs"
echo "--------------------------------"
################################################################################

# if there are remaining jobs
if ls *.slurm.sh 1> /dev/null 2>&1; then
  echo "$(ls *.slurm.sh | wc -l) jobs remain"
else
  echo "no remaining jobs, exiting SUCCESS"
  exit 0
fi

NEXT_PAYLOAD="$(tar -czvf - *.slurm.sh | uuencode -)"

# clear out temporary files
rm -rf *

################################################################################
echo
echo "Submit Next Slurm Stoker"
echo "------------------------"
################################################################################

# run jinja on template
JOB_TEMPLATE="$(mktemp)"
JOB_SCRIPT="$(mktemp)"

echo "JOB_TEMPLATE ${JOB_TEMPLATE}"
echo "JOB_SCRIPT ${JOB_SCRIPT}"

for retry in {1..20}; do
  curl \
    -o "${JOB_TEMPLATE}" \
    "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/slurm_stoker.slurm.sh.jinja" \
  && echo "  job template curl success" && break \
  || (echo "retrying job template curl (${retry})" && sleep $((RANDOM % 10)))
  if ((${retry}==20)); then echo "job template curl fail" && exit 123123; fi
done

export payload="${NEXT_PAYLOAD}"
export container_tag="{{ container_tag }}"
export repo_sha="{{ repo_sha }}"
j2 --import-env "" -o "${JOB_SCRIPT}" "${JOB_TEMPLATE}" -

chmod +x "${JOB_SCRIPT}"

# adapted from https://superuser.com/a/689340
# and https://stackoverflow.com/a/4642975
wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -qO- "https://raw.githubusercontent.com/mmore500/dishtiny/{{ repo_sha }}/script/host_sbatch.sh" | bash -s "${JOB_SCRIPT}"

################################################################################
echo
echo "Done! (SUCCESS)"
echo "---------------"
################################################################################

REPRO_RUNNER_HEREDOC_EOF
